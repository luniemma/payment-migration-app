name: 'Terraform Backend Setup'

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main  # Changed from master to main for consistency
    paths:
      - 'terraform/backend.tf'
      - '.github/workflows/terraform-backend-setup.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/backend.tf'
      - '.github/workflows/terraform-backend-setup.yml'

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  LOCATION: "eastus"
  RESOURCE_GROUP: "terraform-state-rg"

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  check-backend:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if backend exists
        id: check
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Login using service principal
            az login --service-principal \
              --username $ARM_CLIENT_ID \
              --password $ARM_CLIENT_SECRET \
              --tenant $ARM_TENANT_ID
            
            # Set subscription
            az account set --subscription $ARM_SUBSCRIPTION_ID
            
            # Check if resource group exists
            EXISTS=$(az group exists --name ${{ env.RESOURCE_GROUP }})
            if [ "$EXISTS" = "true" ]; then
              echo "Backend infrastructure already exists"
              echo "should_run=false" >> $GITHUB_OUTPUT
            else
              echo "Backend infrastructure needs to be created"
              echo "should_run=true" >> $GITHUB_OUTPUT
            fi

  setup-backend:
    needs: check-backend
    if: needs.check-backend.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    concurrency: 
      group: backend-setup
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Resource Group and Storage Account
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Login using service principal
            az login --service-principal \
              --username $ARM_CLIENT_ID \
              --password $ARM_CLIENT_SECRET \
              --tenant $ARM_TENANT_ID
            
            # Set subscription
            az account set --subscription $ARM_SUBSCRIPTION_ID
            
            # Create Resource Group
            echo "Creating resource group: ${{ env.RESOURCE_GROUP }}"
            az group create \
              --name ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }}

            # Generate unique storage account name (3-24 chars, lowercase alphanumeric)
            RANDOM_SUFFIX=$(openssl rand -hex 4)
            STORAGE_ACCOUNT="tfstate${RANDOM_SUFFIX}"
            
            echo "Creating storage account: $STORAGE_ACCOUNT"
            
            az storage account create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name $STORAGE_ACCOUNT \
              --sku Standard_LRS \
              --encryption-services blob \
              --min-tls-version TLS1_2 \
              --allow-blob-public-access false \
              --https-only true \
              --tags Environment=Production Service=Terraform

            # Get storage account key
            ACCOUNT_KEY=$(az storage account keys list \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --account-name $STORAGE_ACCOUNT \
              --query '[0].value' -o tsv)

            # Create blob container
            az storage container create \
              --name tfstate \
              --account-name $STORAGE_ACCOUNT \
              --account-key $ACCOUNT_KEY \
              --public-access off

            # Enable versioning
            az storage account blob-service-properties update \
              --account-name $STORAGE_ACCOUNT \
              --enable-versioning true

            # Save storage account name for next step
            echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV

      - name: Set BACKEND_STORAGE_ACCOUNT secret
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          # Set the secret
          echo "${{ env.STORAGE_ACCOUNT }}" | gh secret set BACKEND_STORAGE_ACCOUNT --repo "${{ github.repository }}"

      - name: Create backend configuration file
        run: |
          mkdir -p terraform
          cat > terraform/backend-config.txt << EOF
          resource_group_name  = "${{ env.RESOURCE_GROUP }}"
          storage_account_name = "${{ env.STORAGE_ACCOUNT }}"
          container_name       = "tfstate"
          key                  = "terraform.tfstate"
          EOF

      - name: Commit backend configuration
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add terraform/backend-config.txt
            git commit -m "Add Terraform backend configuration [skip ci]"
            git push
          fi

      - name: Notify Success
        if: success() && (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')
        uses: actions/github-script@v7
        with:
          script: |
            const message = `✅ **Backend infrastructure successfully created:**
            
            - **Resource Group:** \`${{ env.RESOURCE_GROUP }}\`
            - **Location:** \`${{ env.LOCATION }}\`
            - **Storage Account:** \`${{ env.STORAGE_ACCOUNT }}\`
            - **Container:** \`tfstate\`
            - **Backend Config:** Created at \`terraform/backend-config.txt\`
            
            You can now initialize Terraform with:
            \`\`\`bash
            terraform init -backend-config=terraform/backend-config.txt
            \`\`\``;
            
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              console.log('Success message:', message);
            }

  cleanup-on-failure:
    needs: [check-backend, setup-backend]
    if: failure() && needs.check-backend.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup failed resources
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            # Login using service principal
            az login --service-principal \
              --username $ARM_CLIENT_ID \
              --password $ARM_CLIENT_SECRET \
              --tenant $ARM_TENANT_ID
            
            # Set subscription
            az account set --subscription $ARM_SUBSCRIPTION_ID
            
            echo "Cleaning up potentially created resources..."
            if az group exists --name ${{ env.RESOURCE_GROUP }}; then
              echo "Deleting resource group: ${{ env.RESOURCE_GROUP }}"
              az group delete --name ${{ env.RESOURCE_GROUP }} --yes --no-wait
            fi

      - name: Notify Failure
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `❌ **Backend infrastructure setup failed**
            
            The setup process encountered an error and any partially created resources have been cleaned up.
            Please check the workflow logs for details and try again.`;
            
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }